name: Makefile Slides CI

# CI workflow to build the PDF slides only. Uses docker:dind so the
# project's scripts can call the Marp CLI via Docker. Caches pip to
# speed up repeated runs.
on:
  push:
    branches: [ 'main' ]
    paths:
      - 'pr/**'
  pull_request:
    branches: [ 'main' ]
    paths:
      - 'pr/**'

jobs:

  build-presentation:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:dind
        options: --privileged
        ports:
          - 2376:2376
    steps:

    - name: Checkout the repo
      uses: actions/checkout@v4

    - name: Create certs directory on runner
      run: mkdir -p .certs/docker

    - name: Wait for dind service to be ready
      run: |
        echo "Waiting for dind service to start..."
        # We can't connect yet, so we just give it a moment to initialize.
        sleep 15

    - name: Copy Docker certs using a sidecar container
      run: |
        docker run --rm \
          --volumes-from docker \
          -v ${{ github.workspace }}/.certs/docker:/runner-certs \
          alpine:latest \
          sh -c "echo 'Waiting for certs...'; \
                 for i in $(seq 1 10); do \
                   if [ -f /certs/client/ca.pem ]; then \
                     cp /certs/client/* /runner-certs/; \
                     echo 'Certs copied.'; \
                     exit 0; \
                   fi; \
                   sleep 1; \
                 done; \
                 echo 'Certs not found.'; \
                 exit 1"

    - name: Set Docker environment variables for subsequent steps
      run: |
        echo "DOCKER_HOST=tcp://localhost:2376" >> $GITHUB_ENV
        echo "DOCKER_TLS_VERIFY=1" >> $GITHUB_ENV
        echo "DOCKER_CERT_PATH=${{ github.workspace }}/.certs/docker" >> $GITHUB_ENV

    - name: Verify Docker TLS connection
      run: |
        echo "Verifying Docker TLS connection..."
        docker version
        docker info

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Test docker by hand
      run: |
        set -ex
        until docker info; do sleep 1; done
        docker version
        docker info
        docker run --rm hello-world
        docker pull marpteam/marp-cli:latest
        docker images

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pr/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        pip install -r pr/requirements.txt

    - name: Wait for Docker daemon
      run: |
        set -ex
        echo "Waiting for Docker daemon at $DOCKER_HOST..."

        # Test docker connectivity
        for i in {1..30}; do
          if docker info >/dev/null 2>&1; then
            echo "Docker daemon is ready"
            docker version
            exit 0
          fi
          echo "Still waiting for docker daemon... ($i)"
          sleep 2
        done

        nc -zv localhost 2376 && echo "Docker daemon is ready, port 2376" && exit 0
        nc -zv docker 2376 && echo "Docker daemon is ready, port 2376, host docker" && exit 0

        echo "Failed to connect to Docker daemon after 60 seconds"
        echo "DOCKER_HOST: $DOCKER_HOST"
        echo "DOCKER_TLS_CERTDIR: $DOCKER_TLS_CERTDIR"
        exit 1

    - name: Cache/restore Marp Docker image
      uses: actions/cache@v4
      id: marp-image-cache
      with:
        path: .cache/docker/marpteam_marp-cli_latest.tar
        key: docker-image-marpteam-marp-cli-latest

    - name: Load or pull Marp image
      run: |
        mkdir -p .cache/docker
        TAR=.cache/docker/marpteam_marp-cli_latest.tar
        if [ -f "$TAR" ]; then
          echo "Loading Marp image from cache..."
          docker load -i "$TAR"
        else
          echo "Cache miss: pulling Marp image and saving to cache..."
          docker pull marpteam/marp-cli:latest
          docker save -o "$TAR" marpteam/marp-cli:latest
        fi

    - name: Build PDF slides
      run: make pdf
      working-directory: pr

    - name: Publish artifacts PDFs
      uses: actions/upload-artifact@v4
      with:
        name: presentacion
        path: pr/pr_slides.pdf
