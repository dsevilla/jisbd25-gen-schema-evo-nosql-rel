name: Makefile Slides CI

# CI workflow to build the PDF slides only. Uses docker:dind so the
# project's scripts can call the Marp CLI via Docker. Caches pip to
# speed up repeated runs.
on:
  push:
    branches: [ 'main' ]
    paths:
      - 'pr/**'
  pull_request:
    branches: [ 'main' ]
    paths:
      - 'pr/**'

jobs:

  build-presentation:
    runs-on: ubuntu-latest

    steps:
    - name: Start TLS-enabled Docker daemon (dind)
      run: |
        set -e
        mkdir -p .dind-certs
        # Run dind with TLS enabled; expose 2376 locally
        docker run -d --name dind --privileged \
          -p 2376:2376 \
          -e DOCKER_TLS_CERTDIR=/certs \
          -v ${GITHUB_WORKSPACE}/.dind-certs:/certs/client \
          docker:dind
        # Wait for certs to be generated
        echo "Waiting for dind certificates..."
        for i in $(seq 1 60); do
          if [ -f "${GITHUB_WORKSPACE}/.dind-certs/ca.pem" ] && [ -f "${GITHUB_WORKSPACE}/.dind-certs/cert.pem" ] && [ -f "${GITHUB_WORKSPACE}/.dind-certs/key.pem" ]; then
            echo "Certificates ready."
            break
          fi
          sleep 1
        done
        ls -l ${GITHUB_WORKSPACE}/.dind-certs

    - name: Configure Docker TLS environment
      run: |
        echo "DOCKER_HOST=tcp://localhost:2376" >> $GITHUB_ENV
        echo "DOCKER_TLS_VERIFY=1" >> $GITHUB_ENV
        echo "DOCKER_CERT_PATH=${GITHUB_WORKSPACE}/.dind-certs" >> $GITHUB_ENV

    - name: Verify Docker daemon (TLS)
      run: |
        set -e
        for i in $(seq 1 60); do
          if docker version && docker info; then
            echo "Docker TLS connection OK"
            exit 0
          fi
          echo "Waiting for docker over TLS... ($i)"
          sleep 2
        done
        echo "Docker over TLS not reachable"
        exit 1

    - name: Checkout the repo
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    # Note: From this point, docker client talks to the TLS-enabled daemon

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pr/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        pip install -r pr/requirements.txt



    - name: Cache/restore Marp Docker image
      uses: actions/cache@v4
      id: marp-image-cache
      with:
        path: .cache/docker/marpteam_marp-cli_latest.tar
        key: docker-image-marpteam-marp-cli-latest

    - name: Load or pull Marp image
      run: |
        mkdir -p .cache/docker
        TAR=.cache/docker/marpteam_marp-cli_latest.tar
        if [ -f "$TAR" ]; then
          echo "Loading Marp image from cache..."
          docker load -i "$TAR"
        else
          echo "Cache miss: pulling Marp image and saving to cache..."
          docker pull marpteam/marp-cli:latest
          docker save -o "$TAR" marpteam/marp-cli:latest
        fi

    - name: Build PDF slides
      run: make pdf
      working-directory: pr

    - name: Publish artifacts PDFs
      uses: actions/upload-artifact@v4
      with:
        name: presentacion
        path: pr/pr_slides.pdf
